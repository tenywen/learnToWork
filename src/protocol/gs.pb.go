// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gs.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// gate和gs的通信协议
type MSG struct {
	Uid  int64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Fd   int64  `protobuf:"varint,2,opt,name=fd" json:"fd,omitempty"`
	Idx  int64  `protobuf:"varint,3,opt,name=idx" json:"idx,omitempty"`
	Api  PROTO  `protobuf:"varint,4,opt,name=api,enum=protocol.PROTO" json:"api,omitempty"`
	Err  ERR    `protobuf:"varint,5,opt,name=err,enum=protocol.ERR" json:"err,omitempty"`
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MSG) Reset()                    { *m = MSG{} }
func (m *MSG) String() string            { return proto.CompactTextString(m) }
func (*MSG) ProtoMessage()               {}
func (*MSG) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MSG) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MSG) GetFd() int64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *MSG) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *MSG) GetApi() PROTO {
	if m != nil {
		return m.Api
	}
	return PROTO_TEST_GATE
}

func (m *MSG) GetErr() ERR {
	if m != nil {
		return m.Err
	}
	return ERR_OK
}

func (m *MSG) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MSG)(nil), "protocol.MSG")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/protocol.Service/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamClient{stream}
	return x, nil
}

type Service_StreamClient interface {
	Send(*MSG) error
	Recv() (*MSG, error)
	grpc.ClientStream
}

type serviceStreamClient struct {
	grpc.ClientStream
}

func (x *serviceStreamClient) Send(m *MSG) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceStreamClient) Recv() (*MSG, error) {
	m := new(MSG)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

type ServiceServer interface {
	Stream(Service_StreamServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Stream(&serviceStreamServer{stream})
}

type Service_StreamServer interface {
	Send(*MSG) error
	Recv() (*MSG, error)
	grpc.ServerStream
}

type serviceStreamServer struct {
	grpc.ServerStream
}

func (x *serviceStreamServer) Send(m *MSG) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceStreamServer) Recv() (*MSG, error) {
	m := new(MSG)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Service_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gs.proto",
}

func init() { proto.RegisterFile("gs.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x2f, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x52, 0xdc, 0xc9, 0xf9, 0x79,
	0xc5, 0x25, 0x10, 0x61, 0xa5, 0x89, 0x8c, 0x5c, 0xcc, 0xbe, 0xc1, 0xee, 0x42, 0x02, 0x5c, 0xcc,
	0xa5, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x20, 0xa6, 0x10, 0x1f, 0x17, 0x53,
	0x5a, 0x8a, 0x04, 0x13, 0x58, 0x80, 0x29, 0x2d, 0x05, 0xa4, 0x22, 0x33, 0xa5, 0x42, 0x82, 0x19,
	0xa2, 0x22, 0x33, 0xa5, 0x42, 0x48, 0x91, 0x8b, 0x39, 0xb1, 0x20, 0x53, 0x82, 0x45, 0x81, 0x51,
	0x83, 0xcf, 0x88, 0x5f, 0x0f, 0x66, 0x81, 0x5e, 0x40, 0x90, 0x7f, 0x88, 0x7f, 0x10, 0x48, 0x4e,
	0x48, 0x9e, 0x8b, 0x39, 0xb5, 0xa8, 0x48, 0x82, 0x15, 0xac, 0x84, 0x17, 0xa1, 0xc4, 0x35, 0x28,
	0x28, 0x08, 0x24, 0x23, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa6, 0xc0, 0xa8,
	0xc1, 0x13, 0x04, 0x66, 0x1b, 0x99, 0x72, 0xb1, 0x07, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a,
	0x69, 0x71, 0xb1, 0x05, 0x97, 0x14, 0xa5, 0x26, 0xe6, 0x0a, 0x21, 0x69, 0xf6, 0x0d, 0x76, 0x97,
	0x42, 0xe5, 0x6a, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x45, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x5d, 0x9a, 0x5d, 0xf4, 0x00, 0x00, 0x00,
}
